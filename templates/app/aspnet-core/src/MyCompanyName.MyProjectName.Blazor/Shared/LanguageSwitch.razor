@using Volo.Abp.Localization
@using System.Globalization
@inject ILanguageProvider LanguageProvider
@inject IJSRuntime JsRuntime
@if (_languages != null && _languages.Count > 1)
{
    <Dropdown>
        <DropdownToggle Color="Color.None">
            @_currentLanguage.DisplayName
        </DropdownToggle>
        <DropdownMenu>
            @foreach (var language in _languages)
            {
                if (language == _currentLanguage)
                {
                    continue;
                }

                <DropdownItem Clicked="() => ChangeLanguageAsync(language)">@language.DisplayName</DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>
}
@code {
    private IReadOnlyList<LanguageInfo> _languages;
    private LanguageInfo _currentLanguage;

    protected override async Task OnInitializedAsync()
    {
        var selectedLanguageName = await JsRuntime.InvokeAsync<string>(
            "localStorage.getItem",
            "Abp.SelectedLanguage"
            );

        _languages = await LanguageProvider.GetLanguagesAsync();

        if (!_languages.Any())
        {
            return;
        }

        if (!selectedLanguageName.IsNullOrWhiteSpace())
        {
            _currentLanguage = _languages.FirstOrDefault(l => l.UiCultureName == selectedLanguageName);
        }

        if (_currentLanguage == null)
        {
            _currentLanguage = _languages.FirstOrDefault(l => l.UiCultureName == CultureInfo.CurrentUICulture.Name);
        }

        if (_currentLanguage == null)
        {
            _currentLanguage = _languages.FirstOrDefault();
        }
    }

    private async Task ChangeLanguageAsync(LanguageInfo language)
    {
        await JsRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "Abp.SelectedLanguage", language.UiCultureName
            );

        await JsRuntime.InvokeVoidAsync("location.reload");
    }
}
